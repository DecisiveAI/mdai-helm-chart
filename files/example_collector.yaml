apiVersion: mydecisive.ai/v1
kind: MyDecisiveEngine
metadata:
  namespace: mdai
  labels:
    app.kubernetes.io/name: mydecisiveengine
    app.kubernetes.io/instance: mydecisiveengine-sample
    app.kubernetes.io/part-of: mydecisive-engine-operator
    app.kubernetes.io/created-by: mydecisive-engine-operator
  name: mydecisiveengine-sample
spec:
  telemetryModule:
    attributes:
      name: "telemetry"
      version: "0.0.1"
    collectors:
      -
        name: "gateway"
        enabled: true
        measureVolumes:
          enabled: true
        telemetryFiltering:
          filters:
            - name: mute-noisy-services
              enabled: true
              description: filter noisy services
              managedFilter:
                pipelines:
                  - logs/customer_pipeline
                filterProcessorConfig:
                  logs:
                    log_record:
                      - 'IsMatch(resource.attributes["service.name"], "<<SERVICE_LIST>>") and attributes["log_level"] == "INFO"'
                alertingRules:
                  - name: noisy-service-threshold
                    alert_query: 'increase(mdai_log_bytes_received_total{service_name!=""}[6m]) > 5 * 1024 * 1024'
                    for: 1m
                    severity: warning
                    action: manageFilter
        spec:
          resources:
            limits:
              cpu: "1"
              memory: 512M
            requests:
              cpu: "1"
              memory: 512M
          ports:
            - name: promexporter
              port: 9464
              protocol: TCP
            - name: metrics
              port: 8888
              protocol: TCP
            - name: fluentforward
              port: 8006
              protocol: TCP
          env:
          - name: MY_POD_IP
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: status.podIP
          - name: GOMAXPROCS
            value: "1"
          - name: AWS_ACCESS_KEY_ID
            value: writer-svcacct
          - name: AWS_SECRET_ACCESS_KEY
            value: writer123
          config:
            receivers:
              fluentforward:
                endpoint: '${env:MY_POD_IP}:8006'
              otlp:
                protocols:
                  grpc:
                    endpoint: '${env:MY_POD_IP}:4317'
                  http:
                    endpoint: '${env:MY_POD_IP}:4318'
                    # Since this collector needs to receive data from the web, enable cors for all origins
                    # `allowed_origins` can be refined for your deployment domain
                    cors:
                      allowed_origins:
                      - "http://*"
                      - "https://*"

            extensions:
              # The health_check extension is mandatory for this chart.
              # Without the health_check extension the collector will fail the readiness and liveliness probes.
              # The health_check extension can be modified, but should never be removed.
              health_check:
                endpoint: "${env:MY_POD_IP}:13133"

            processors:
              memory_limiter:
                check_interval: 23s
                limit_percentage: 75
                spike_limit_percentage: 15

              batch:
                send_batch_size: 10000
                timeout: 13s
              
              groupbyattrs:
                keys:
                  - service.name

              resource/watcher_receiver_tag:
                attributes:
                  - key: watcher_direction
                    value: "received"
                    action: upsert

              resource/watcher_exporter_tag:
                attributes:
                  - key: watcher_direction
                    value: "exported"
                    action: upsert

              filter/severity:
                error_mode: ignore
                logs:
                  log_record:
                    - 'attributes["log_level"] == "INFO"'

            exporters:
              debug: {}
              otlp/watcher:
                endpoint: watcher-collector-service.default.svc.cluster.local:4317
                tls:
                  insecure: true

            service:
              telemetry:
                metrics:
                  address: ":8888"
              extensions:
              - health_check
              pipelines:
                logs/customer_pipeline:
                  receivers: [otlp, fluentforward]
                  processors: [memory_limiter, batch, groupbyattrs, resource/watcher_exporter_tag]
                  exporters: [debug, otlp/watcher]

                logs/watch_receivers: 
                  receivers: [otlp, fluentforward]
                  processors: [memory_limiter, batch, groupbyattrs, resource/watcher_receiver_tag]
                  exporters: [debug, otlp/watcher]
